(in-package #:game)

(defstruct (vbo (:constructor make-vbo-raw))
  (name nil :type (or symbol null) :read-only t)
  (handle (error "Must provide HANDLE") :type fixnum :read-only t)
  (normalize (error "Must provide NORMALIZE") :type boolean :read-only t)
  (size (error "Must provide SIZE") :type fixnum :read-only t)
  (type (error "Must provide TYPE") :type keyword :read-only t))

(defun bind-vbo (vbo)
  (gl:bind-buffer :array-buffer (vbo-handle vbo)))

(defun make-vbo (size data &key name (normalize nil) (type :float) (usage :static-draw))
  (unless (vectorp data)
    (setf data (coerce data 'vector)))

  (let ((arr    (gl:alloc-gl-array type (length data)))
        (handle (gl:gen-buffer)))
    (gl:bind-buffer :array-buffer handle)
    (iter
      (for x in-vector data with-index i)
      (setf (gl:glaref arr i) x))
    (gl:buffer-data :array-buffer usage arr)
    (let ((free (lambda () (add-thunk (gl:delete-buffers (list handle)))))
          (vbo (make-vbo-raw :handle handle :name name :normalize normalize :size size :type type)))
      (finalize vbo free)
      vbo)))

(defstruct (vao (:constructor make-vao-raw))
  (handle (error "Must provide HANDLE") :type fixnum :read-only t)
  (vbo-bindings (error "Must provide VBO-BINDINGS") :type (vector (cons fixnum vbo))
                                                    :read-only t))

(defun make-vao (vbo-bindings)
  (let ((handle (gl:gen-vertex-array))
        (num-vbos 0))
    (gl:bind-vertex-array handle)
    (iter
      (for (loc . vbo) in-vector vbo-bindings)
      (incf num-vbos)
      (bind-vbo vbo)
      (gl:enable-vertex-attrib-array loc)
      (gl:vertex-attrib-pointer loc (vbo-size vbo) (vbo-type vbo) (vbo-normalize vbo) 0 0))
    (let ((free (lambda () (add-thunk (gl:delete-vertex-arrays (list handle)))))
          (vao (make-vao-raw :handle handle :vbo-bindings vbo-bindings)))
      (finalize vao free)
      vao)))
