(in-package #:game)

(defmacro generate-uniform-vectors ()
  (let ((protos '((float single-float gl:uniformfv 1)
                  (vec2  single-float gl:uniformfv 2)
                  (vec3  single-float gl:uniformfv 3)
                  (vec4  single-float gl:uniformfv 4)
                  (int   fixnum gl:uniformiv 1)
                  (ivec2 fixnum gl:uniformiv 2)
                  (ivec3 fixnum gl:uniformiv 3)
                  (ivec4 fixnum gl:uniformiv 4)
                  (mat2 single-float gl:uniform-matrix-2fv 2 2)
                  (mat3 single-float gl:uniform-matrix-3fv 3 3)
                  (mat4 single-float gl:uniform-matrix-4fv 4 4)
                  (mat3x2 single-float gl:uniform-matrix-3x2-fv 3 2)
                  (mat4x2 single-float gl:uniform-matrix-4x2-fv 4 2)
                  (mat2x3 single-float gl:uniform-matrix-2x3-fv 2 3)
                  (mat4x3 single-float gl:uniform-matrix-4x3-fv 4 3)
                  (mat2x4 single-float gl:uniform-matrix-2x4-fv 2 4)
                  (mat3x4 single-float gl:uniform-matrix-3x4-fv 3 4))))
    (cons 'progn
          (iter
            (for (type-name component bind . size) in protos)
            (for name = (intern (format nil "UNIFORM-~a" type-name)))
            (for get-contents = (intern (format nil "~a-CONTENTS" name)))
            (collecting `(defstruct ,name
                           (contents (error "Must provide CONTENTS")
                                     :type (vector ,component ,(apply #'* size)))))
            (collecting `(defmethod bind-uniform ((u ,name) loc)
                           (,bind loc (,get-contents u))))))))

(defgeneric bind-uniform (u loc))
(generate-uniform-vectors)
