(in-package #:game)

(defmacro generate-uniform-vectors ()
  (let ((protos '((float single-float 1)
                  (vec2 single-float 2)
                  (vec3 single-float 3)
                  (vec4 single-float 4)
                  (int fixnum 1)
                  (ivec2 fixnum 2)
                  (ivec3 fixnum 3)
                  (ivec4 fixnum 4)
                  (mat2 single-float 2 2)
                  (mat3 single-float 3 3)
                  (mat4 single-float 4 4)
                  (mat3x2 single-float 3 2)
                  (mat4x2 single-float 4 2)
                  (mat2x3 single-float 2 3)
                  (mat4x3 single-float 4 3)
                  (mat2x4 single-float 2 4)
                  (mat3x4 single-float 3 4))))
    (cons 'progn
          (iter
            (for (type-name component . size) in protos)
            (for name = (intern (format nil "UNIFORM-~a" type-name)))
            (collecting `(defstruct ,name
                           (contents (error "Must provide CONTENTS")
                                     :type (vector ,component ,(apply #'* size)))))
            (collecting `(defmethod bind-uniform ((u ,name) loc)
                           (err :todo "TODO: bind-uniform ~a ~a" u loc)))
            ))))

(defgeneric bind-uniform (u loc))
(print (macroexpand-1 '(generate-uniform-vectors)))
(generate-uniform-vectors)
