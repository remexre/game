(in-package :game)

(def-loop-body :events ()
  (dolist (event (get-events))
    (match event
      (:close-requested (setf *continue-loop* nil))
      ((list :keyboard :r :release (list :control))
       (reload-program))
      ((list :keyboard :r :release (list :shift :control))
       (assets:reload-all-assets)
       (reload-program))
      ((list :resize w h)
       (gl:viewport 0 0 w h)
       (let ((camera (renderer-camera *renderer*))
             (aspect-ratio (coerce (/ w h) 'single-float)))
         (setf (camera-aspect-ratio camera) aspect-ratio))
       (handle-event event))
      ((list :keyboard :w (or :press :repeat) nil) (move  1.0  0.0  0.0))
      ((list :keyboard :s (or :press :repeat) nil) (move -1.0  0.0  0.0))
      ((list :keyboard :a (or :press :repeat) nil) (move  0.0 -1.0  0.0))
      ((list :keyboard :d (or :press :repeat) nil) (move  0.0  1.0  0.0))
      ((list :keyboard :q (or :press :repeat) nil) (move  0.0  0.0 -1.0))
      ((list :keyboard :e (or :press :repeat) nil) (move  0.0  0.0  1.0))
      ((list :keyboard :i (or :press :repeat) nil) (rot 0 -1.0))
      ((list :keyboard :k (or :press :repeat) nil) (rot 0  1.0))
      ((list :keyboard :j (or :press :repeat) nil) (rot 1 -1.0))
      ((list :keyboard :l (or :press :repeat) nil) (rot 1  1.0))
      ((list :keyboard (or :w :s :a :d :q :e :i :k :j :l) :release nil) nil)
      ((list :keyboard _ _ _)
       (handle-event event))
      (_ (prn t "unknown event ~s" event)))))

(defun handle-event (event)
  (prn :event "~a" event)
  (when-let (scene (and *renderer* (cdr (renderer-scene-entry *renderer*))))
    (iter
      (for script-entry in (scene-script-entries scene))
      (for script = (cdr script-entry))
      (script-on-event script event))))
